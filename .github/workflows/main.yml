name: env_tutorial
## Triggers the workflow on when there is a push, or 
## pull request on the main branch
on: [pull_request, push] 

jobs:
  job1:
    ## The type of runner that the job will run on
    runs-on: ubuntu-latest 
    steps:
      - name: step 1
        ## Reference your environment variables
        run: echo "AWS_ACCESS_KEY_ID:${{secrets.AWS_ACCESS_KEY_ID}}"   

  job2:
    runs-on: ubuntu-latest
    steps:
      - name: step 1
        ## Reference your environment variables
        run: echo "AWS_SECRET_ACCESS_KEY:${{secrets.AWS_SECRET_ACCESS_KEY}}"  
        - name: Terraform Init
  id: init
  run: terraform init
  - name: Terraform Plan
  id: plan
  if: github.event_name == 'pull_request'
  run: terraform plan -no-color -input=false
  continue-on-error: true
  - name: Update Pull Request
  uses: actions/github-script@6
  if: github.event_name == 'pull_request'
  env:
    PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  with:
    github-token: ${{ secrets.GITHUB_TOKEN }}
    script: |
      const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

      <details><summary>Show Plan</summary>

      \`\`\`\n
      ${process.env.PLAN}
      \`\`\`

      </details>

      *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      github.rest.issues.createComment({
        issue_number: context.issue.number,
        owner: context.repo.owner,
        repo: context.repo.repo,
        body: output
      })
- name: Terraform Plan Status
  if: steps.plan.outcome == 'failure'
  run: exit 1
  - name: Terraform Apply
  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  run: terraform apply -auto-approve -input=false
